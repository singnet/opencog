/*
 * tests/dynamics/HebbianCreationModuleUTest.cxxtest
 *
 * Copyright (C) 2014 Cosmo Harrigan
 * All Rights Reserved
 *
 * Written by Cosmo Harrigan
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/attention/AttentionModule.h>
#include <opencog/attention/AttentionParamQuery.h>
#include <opencog/attention/HebbianCreationAgent.h>

#include <opencog/neighbors/Neighbors.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attentionbank/types/atom_types.h>
#include <opencog/attentionbank/avalue/AttentionValue.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/util/algorithm.h>
#include <opencog/cogserver/server/Factory.h>

using namespace opencog;
using namespace std;

class HebbianCreationModuleUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* as;
    AgentPtr _hebbiancreation_agentptr;

public:
    void tearDown()
    {
        cogserver().stop();
    }

    void InitCogServer()
    {
       config().set("MODULES", "opencog/attention/libattention.so"); 
        
        AttentionParamQuery _atq(&cogserver().getAtomSpace());
        _atq.load_default_values(); // Load default ECAN param values into AS

        Factory<HebbianCreationAgent, Agent> hebbianCreationFactory;
        cogserver().registerAgent(HebbianCreationAgent::info().id,&hebbianCreationFactory);
        _hebbiancreation_agentptr =
            cogserver().createAgent(HebbianCreationAgent::info().id,false);
        
        cogserver().loadModules();
        this->as = &cogserver().getAtomSpace();
    }

    void testHebbianLinkCreation(void)
    {
        InitCogServer();
        cogserver().startAgent(_hebbiancreation_agentptr,true,"hca");


         AttentionBank& ab = attentionbank(&cogserver().getAtomSpace());
        // Set the AttentionalFocusBoundary
        //as->setAttentionalFocusBoundary(100);

        count_t conf90 = 900; //SimpleTruthValue::confidenceToCount(0.90);

        // Populate the AtomSpace with the example atoms
        Handle kermit = as->add_node(
            CONCEPT_NODE, "Kermit");
        kermit->setTruthValue( SimpleTruthValue::createTV(0.001, conf90));
        Handle frog = as->add_node(
            CONCEPT_NODE, "Frog");
        frog->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));
        Handle animal = as->add_node(
            CONCEPT_NODE, "Animal");
        animal->setTruthValue( SimpleTruthValue::createTV(0.1, conf90));
        Handle alive = as->add_node(
            PREDICATE_NODE, "alive");
        alive->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));
        Handle slimy = as->add_node(
            PREDICATE_NODE, "slimy");
        slimy->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));

        Handle kermitFrog = as->add_link(
                    INHERITANCE_LINK, kermit, frog);
        kermitFrog->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogAnimal = as->add_link(
                    INHERITANCE_LINK, frog, animal);
        frogAnimal->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogAlive = as->add_link(
                    EVALUATION_LINK, frog, alive);
        frogAlive->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogSlimy = as->add_link(
                    EVALUATION_LINK, frog, slimy);
        frogSlimy->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));

        // Populate the AtomSpace with some additional dummy atoms
        Handle dummy1 = as->add_node(
                    CONCEPT_NODE, "Dummy1");
        dummy1->setTruthValue(
                    SimpleTruthValue::createTV(0.001, conf90));
        Handle dummy2 = as->add_node(
                    CONCEPT_NODE, "Dummy2");
        dummy2->setTruthValue(
                    SimpleTruthValue::createTV(0.001, conf90));
        Handle dummyLink = as->add_link(
                    INHERITANCE_LINK, dummy1, dummy2);
        dummyLink->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));

        // Put these atoms in the AttentionalFocus:
        // "Kermit", "Frog", "Animal", "alive"
        ab.stimulate(kermit, 200);
        ab.stimulate(frog, 200);
        ab.stimulate(animal, 200);
        ab.stimulate(alive, 200);

        HandleSeq attentionalFocus;
        ab.get_handle_set_in_attentional_focus(back_inserter(attentionalFocus));

        TS_ASSERT_EQUALS(attentionalFocus.size() , 4);
        // Allow the events to propagate
        sleep(1);

        // Confirm that these atoms now have AsymmetricHebbianLinks between
        // them: "Kermit", "Frog", "Animal", "alive"
        std::cout << "\nAF: " << std::endl;
        for (Handle node : attentionalFocus) {
            HandleSeq existingAsSource = get_target_neighbors(node, ASYMMETRIC_HEBBIAN_LINK);
            HandleSeq existingAsTarget = get_source_neighbors(node, ASYMMETRIC_HEBBIAN_LINK);
            
            std::cout << node->to_string() << std::endl;
            //TS_ASSERT(existingAsSource.size() == 3);
           // TS_ASSERT(existingAsTarget.size() == 3);
        }

        // Confirm that only n*(n-1) = 12 AsymmetricHebbianLinks were formed,
        // indicating that none incorrectly include "slimy" nor the dummy atoms
        HandleSeq hebbianLinks;
        as->get_handles_by_type(back_inserter(hebbianLinks), ASYMMETRIC_HEBBIAN_LINK);
        std::cout << "count(HebLinks) = " << hebbianLinks.size() << "\n";
        TS_ASSERT(hebbianLinks.size() == 12);

        cogserver().stopAgent(_hebbiancreation_agentptr);
    }
};
