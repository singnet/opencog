/*
 * opencog/tests/learning/miner/SurprisingnessUTest.cxxtest
 *
 * Copyright (C) 2019 by SingularityNET Foundation
 * All Rights Reserved
 *
 * Written by Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/util/random.h>

#include <opencog/learning/miner/Surprisingness.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/atoms/execution/Instantiator.h>
#include <opencog/rule-engine/backwardchainer/BackwardChainer.h>
#include <opencog/rule-engine/URELogger.h>
#include <opencog/guile/SchemeEval.h>

#include "MinerUTestUtils.h"

using namespace opencog;
using namespace std;

#define al _as.add_link
#define an _as.add_node

class SurprisingnessUTest : public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _scm;

	// I-Surprisingness rule base
	Handle _isurp_rb;

	// Concept holding the texts
	Handle _texts_cpt;

	void load_ugly_male_soda_drinker_corpus();
	HandleSeq ure_isurp(unsigned max_conjuncts);
	
public:
	SurprisingnessUTest();
	~SurprisingnessUTest();

	void setUp();
	void tearDown();

	void test_ISurprisingness_ugly_man();
	void test_ISurprisingness_ugly_man_soda_drinker();
};

void SurprisingnessUTest::load_ugly_male_soda_drinker_corpus()
{
	std::string rs =
		_scm.eval("(load-from-path \"ugly-male-soda-drinker-corpus.scm\")");
	logger().debug() << "rs = " << rs;
	HandleSet texts;
	_as.get_handles_by_type(std::inserter(texts, texts.end()),
	                        opencog::INHERITANCE_LINK, true);
	for (const Handle text : texts)
		al(MEMBER_LINK, text, MinerUTestUtils::add_texts_cpt(_as));
}

HandleSeq SurprisingnessUTest::ure_isurp(unsigned max_conjuncts)
{
	return MinerUTestUtils::ure_isurp(_as, _scm, _isurp_rb, max_conjuncts);
}

SurprisingnessUTest::SurprisingnessUTest() : _scm(&_as)
{
	randGen().seed(0);

	// Main logger
	logger().set_level(Logger::DEBUG);
	logger().set_timestamp_flag(false);
	logger().set_sync_flag(true);
	logger().set_print_to_stdout_flag(true);

	// URE logger
	ure_logger().set_level(Logger::INFO);
	ure_logger().set_timestamp_flag(false);
	ure_logger().set_sync_flag(true);
	ure_logger().set_print_to_stdout_flag(true);

	// Configure scheme load-paths that are common for all tests.
	_scm.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR
	          "/tests/learning/miner/scm\")");
	_scm.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR
	          "/opencog/learning/miner\")");

	// Load modules
	_scm.eval("(use-modules (opencog))");
	std::string rs = _scm.eval("(use-modules (opencog miner))");
	logger().debug() << "MinerUTest() rs = " << rs;
}

SurprisingnessUTest::~SurprisingnessUTest() {}

void SurprisingnessUTest::setUp()
{
	_texts_cpt = an(CONCEPT_NODE, "texts");
	_isurp_rb = an(CONCEPT_NODE, "isurp_rb");
}

void SurprisingnessUTest::tearDown()
{
	_as.clear();
}

// Test I-Surprisingess for the ugly male
void SurprisingnessUTest::test_ISurprisingness_ugly_man()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	load_ugly_male_soda_drinker_corpus();

	// Add
	//
	// Lambda
	//   X
	//   And
	//     Inheritance
	//       X
	//       Concept "man"
	//     Inheritance
	//       X
	//       Concept "soda drinker"
	//     Inheritance
	//       X
	//       Concept "ugly"
	//
	// and its conjuncts.
	Handle ugly_pattern = MinerUTestUtils::add_ugly_pattern(_as),
		man_pattern = MinerUTestUtils::add_man_pattern(_as),
		ugly_man_pattern = MinerUTestUtils::add_ugly_man_pattern(_as);

	// Wrap pattern and its conjuncts in minsup predicates
	int ms = 5;
	MinerUTestUtils::add_minsup_eval(_as, ugly_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, man_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, ugly_man_pattern, ms, TruthValue::TRUE_TV());

	// Test I-Surprisingness
	unsigned max_conjuncts = 2;
	HandleSeq isurp_results = ure_isurp(max_conjuncts);
	Handle expected = MinerUTestUtils::add_isurp_eval(_as, ugly_man_pattern);

	logger().debug() << "isurp_results = " << oc_to_string(isurp_results);

	TS_ASSERT(not isurp_results.empty());

	Handle isurp_front = isurp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "isurp_front = " << oc_to_string(isurp_front);
	
	TS_ASSERT(content_eq(expected, isurp_front));
}

// Test I-Surprisingess for the ugly male soda drinker
void SurprisingnessUTest::test_ISurprisingness_ugly_man_soda_drinker()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Define texts
	load_ugly_male_soda_drinker_corpus();

	// Add
	//
	// Lambda
	//   X
	//   And
	//     Inheritance
	//       X
	//       Concept "man"
	//     Inheritance
	//       X
	//       Concept "soda drinker"
	//     Inheritance
	//       X
	//       Concept "ugly"
	//
	// and its conjuncts.
	Handle ugly_pattern = MinerUTestUtils::add_ugly_pattern(_as),
		man_pattern = MinerUTestUtils::add_man_pattern(_as),
		soda_drinker_pattern = MinerUTestUtils::add_soda_drinker_pattern(_as),
		umsd_pattern = MinerUTestUtils::add_ugly_man_soda_drinker_pattern(_as);

	// Wrap pattern and its conjuncts in minsup predicates
	int ms = 5;
	MinerUTestUtils::add_minsup_eval(_as, ugly_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, man_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, soda_drinker_pattern, ms, TruthValue::TRUE_TV());
	MinerUTestUtils::add_minsup_eval(_as, umsd_pattern, ms, TruthValue::TRUE_TV());

	// Test I-Surprisingness
	unsigned max_conjuncts = 3;
	HandleSeq isurp_results = ure_isurp(max_conjuncts);
	Handle expected = MinerUTestUtils::add_isurp_eval(_as, umsd_pattern);

	logger().debug() << "isurp_results = " << oc_to_string(isurp_results);

	TS_ASSERT(not isurp_results.empty());

	Handle isurp_front = isurp_results.front();

	logger().debug() << "expected = " << oc_to_string(expected);
	logger().debug() << "isurp_front = " << oc_to_string(isurp_front);

	TS_ASSERT(content_eq(expected, isurp_front));
	TS_ASSERT_DELTA(0.9997, expected->getTruthValue()->get_mean(), 0.0001);
}

#undef al
#undef an
